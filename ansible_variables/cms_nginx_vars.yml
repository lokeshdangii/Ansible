---
- name: Setting up CMS Application on AWS EC2 instance
  hosts: my_servers
  become: yes
  gather_facts: yes
  remote_user: ubuntu

  vars:
    # Step 1 variables
    apt_update_cache_duration: 3600
    required_packages:
      - python3-venv
      - mysql-server
      - python3-pip
      - libmysqlclient-dev
      - python3-dev
      - build-essential
      - libssl-dev
      - libffi-dev
      - python3-setuptools
      - pkg-config
    
    # Step 2 variables
    mysql_db_name: "cardb"
    sql_file_src_path: "/home/lokesh/Desktop/Decode/CMS/cardb.sql"
    sql_file_dest_path: "/home/ubuntu/cardb.sql"
    mysql_user_password: "root"
    python_interpreter_path: "/usr/bin/python3"


    # Step 3 variables
    cms_repo_url: "https://github.com/lokeshdangii/CMS.git"
    cms_dir_path: "/home/ubuntu/CMS"
    venv_path: "/home/ubuntu/CMS/env"
    requirements_file: "/home/ubuntu/CMS/requirements.txt"
    gunicorn_executable: "/home/ubuntu/CMS/env/bin/gunicorn"
    wsgi_file_path: "/home/ubuntu/CMS/wsgi.py"
    # systemd_service_name: "cms"
    nginx_config_src: "/home/lokesh/Desktop/Decode/AWS_Script/Gunicorn/cms"

    # WSGI variables
    wsgi_file_src: "/home/lokesh/Desktop/Decode/AWS_Script/Gunicorn/wsgi.py"
    wsgi_file_dest: "{{ cms_dir_path }}/wsgi.py"

    # Systemd service variables
    systemd_service_src: "/home/lokesh/Desktop/Decode/AWS_Script/Gunicorn/cms.service"
    systemd_service_dest: "/etc/systemd/system/cms.service"

    # Nginx setup variables
    nginx_config_src: "/home/lokesh/Desktop/Decode/AWS_Script/Gunicorn/cms"
    nginx_config_dest: "/etc/nginx/sites-available/cms"
    nginx_sites_enabled: "/etc/nginx/sites-enabled/"

  # Step 1 --> Installing and Updating packages
  tasks:
    - name: "Update Repository cache"
      apt:
        update_cache: true
        cache_valid_time: "{{ apt_update_cache_duration }}"
        force_apt_get: true

    - name: Installing required packages
      ansible.builtin.apt:
        name: "{{ required_packages }}"
        state: present
      become: true
        

    # Step2 -->  Database setup for the CMS Application

    - name: Install MySQL Python module
      ansible.builtin.pip:
        name: mysqlclient
        state: present
      become: true
      vars:
        ansible_python_interpreter: "{{ python_interpreter_path }}"

    - name: Create new databases with name {{ mysql_db_name }}
      community.mysql.mysql_db:
        name:
          - cardb
        state: present

    - name: Copy file cardb.sql to remote hosts
      ansible.builtin.copy:
        src: "{{ sql_file_src_path }}"
        dest: "{{ sql_file_dest_path }}"
      become: true

    - name: Import Database Schema
      shell: "sudo mysql {{ mysql_db_name }} < {{ sql_file_dest_path }}"
      become_user: root

    - name: Update MySQL User Password
      shell: "sudo mysql -e 'ALTER USER \"root\"@\"localhost\" IDENTIFIED WITH mysql_native_password BY \"{{ mysql_user_password }}\";'"
      become_user: root

    - name: Print Database Setup Completed Message
      ansible.builtin.debug:
        msg: "Database setup completed successfully."

    # Step3 -> Cloning CMS From Github

    - name: Create CMS directory
      ansible.builtin.file:
        path: "{{ cms_dir_path }}"
        state: directory

    - name: Clone a github repository
      ansible.builtin.git:
        repo: https://github.com/lokeshdangii/CMS.git
        dest: "{{ cms_dir_path }}"
        clone: yes
        update: yes

    # Creating a Python Virtual Environment
    - name: Create Python Virtual Environment
      become: yes
      command: python3 -m venv env
      args:
        chdir: "{{ cms_dir_path }}"

    # Activating the virtualenv and installing packages
    - name: Activate virtualenv and install requirements
      ansible.builtin.shell:
        cmd: |
          source /home/ubuntu/CMS/env/bin/activate && \
          pip install -r requirements.txt && \
          pip install wheel && \
          pip install gunicorn flask
        executable: /bin/bash
      become: yes
      args:
        chdir: "{{ cms_dir_path }}"

    # Copy file wsgi.py to remote hosts CMS directory 
    - name: Create the wsgi entry point
      ansible.builtin.copy:
        src: "{{ wsgi_file_src }}"
        dest: "{{ wsgi_file_dest }}"
      become: true

    # systemd unit file --> cms.service
    - name: CMS Service configuration
      ansible.builtin.copy:
        src: "{{ systemd_service_src }}"
        dest: "{{ systemd_service_dest }}"
      become: true

    # changing the group associated with home directory because the Nginx www-data user wonâ€™t be able to read files in your home directory by default
    - name: Change group ownership of /home/ubuntu to www-data
      ansible.builtin.file:
        path: /home/ubuntu
        state: directory
        owner: ubuntu
        group: www-data
        recurse: true
      become: true

    # Reload the systemd manager configuration to pick up the changes:
    - name: Reload systemd manager configuration
      ansible.builtin.systemd:
        daemon_reload: yes
      become: true

    # start the uWSGI created service --> cms.service :
    - name: Start the CMS service
      ansible.builtin.systemd:
        name: cms
        state: started
      become: true

    # enable it so that it starts at boot:
    - name: Enable the CMS service
      ansible.builtin.systemd:
        name: cms
        enabled: yes
      become: true

    - name: Print CMS Service Setup Completed 
      ansible.builtin.debug:
        msg: "CMS Service started successfully."


# nginx setup

    - name: Install Nginx
      ansible.builtin.apt:
        name: nginx
        state: present
      become: yes

    - name: Copy Nginx configuration file
      ansible.builtin.copy:
        src: "{{ nginx_config_src }}"
        dest: "{{ nginx_config_dest }}"
        mode: '0644'
      become: yes

    - name: Create a symbolic link to enable the configuration using command module
      ansible.builtin.command: ln -s "{{ nginx_config_dest }}" "{{ nginx_sites_enabled }}"
      become: yes

    - name: Unlink the default one
      ansible.builtin.command: unlink /etc/nginx/sites-enabled/default
      become: yes

    - name: Restart Nginx
      ansible.builtin.systemd:
        name: nginx
        state: restarted
      become: yes

    - name: Print Nginx Setup Completed 
      ansible.builtin.debug:
        msg: "CMS application is served successfully on nginx. Access the application by server public IP Address"
